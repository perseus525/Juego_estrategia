
//Esta es una lista de todos los datos/comandos/métodos que utilizan de algún modo la clase "Luchador"

//Dado que esto es simplemente un "copiar pegar" del archivio "ejecutable" es poco probable que alguno de los métodos funcione
//dados los límites de mis conocimientos de programación.

import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;


public static class Luchador{
        
        //inicialización de los atributos de la clase Luchador
        private String name;
        
        private String type;
        
        private int hp;
        
        private int atk;
        
        private int def;
        
        private int spd;
        
        private int rank;
        
        private objetoEquipable item;
        
        
   
        //constructor de la clase Luchador
        Luchador(){
            
            this.name = darNameLuchador();
            
            this.rank = darRankLuchador();

            this.hp = darHpLuchador() * rank;
            
            this.atk = darAtkLuchador() * rank;
        
            this.def = darDEF() * rank;
        
            this.def = darSPD() * rank;
        
            this.type = darType();
            
            this.item = createItemZero();
        }
        
    //los "gets" que se han necesitado hasta el momento, esta lista pudiese aumentar en el futuro
    public String getName(){
            return name;}    
    
    public int getRank(){
            return rank;} 
    
    public String getType(){
            return type;} 
    }
    
    
    //método para crear un luchador de manera aleatoria 
    private static void crearLuchador(ArrayList <Luchador> list){
        
        //este método crea un nuevo Luchador y muetsra sus estadísticas por pantalla
        
        //aqui se revisa cuantos Luchadores se tiene, de tenerse menos de 25 se crea uno nuevo
        if (list.size() < 25){
        
            list.add(new Luchador());  
         
            if(list.size() > 1){
                
                //invocacion el metodo que revisa los nombres repetidos
                checkName(list, (list.get( (list.size () - 1) ). getName()));
          
            }
          
          System.out.println("Your new Fighter is: "); 
         
          //invocacion al metodo que muestra a un Luchador con todas sus estadisticas
            mostrarLuchadorCompleto(list.get(list.size()-1));
          
        }
    
        else{
            
        System.out.println("You cannot have any more fighters.");
        
        }
     }
     
     
     //metodo para eliminar al luchador
    private static void eliminarLuchador(ArrayList <Luchador> list, int fighterID){
    
        list.remove(fighterID);
    }
     //método para asignarle un nombre a un Luchador
    private static String darNameLuchador(){

        //este método selciona uno de los nombres disponibles de manera aleatoria y  se lo asigna al nuevo Luchador 
        
        String nameList[] ={"Jack", "Jill", "Peter", "Ayla", "Kirtash","Lucy", "Mordecai", "Leliana", "David", "Lethaline", "Arthur", "Leticia",
                            "Marcus", "Morgana", "Frederick", "Krysta", "Kaiser", "Echo", "Zack", "Susan", "Hector", "Chain", "Soul", "Memphis", 
                            "Leroy", "Hana", "Kentaro", "Misaki", "Wilfred", "Kohakuren"};
        
        int randomNum = ThreadLocalRandom.current().nextInt(0, (nameList.length));

        String nombre = nameList[randomNum];

        return nombre;
    }
    
    
     //método para revisar los nombres de los luchadroes y así evitar la repetición de nombres
    private static void checkName(ArrayList <Luchador> list, String checkName){
        
        //este método revisa el nombre del último Luchador creado y lo compara con todos los nombres de los Luchadores creados anteriormente
        //si el nombre del Luchador nuevo ya está en uso, invoca al método "darName", asigna un nuevo nombre y luego lo compara con los nombres de
        //los luchadores creados hasta que al nuevo Luchador se le asigne un nombre que no esté en uso
        
        int i = list.size() - 2;
        
        while ( i >= 0){
                        
            if(list.get(i).getName() .equals( checkName )){
                
                    list. get ( list.size () - 1).name = darNameLuchador();
                    
                    checkName = list. get ( list.size () - 1).name;
                    
                    i = list.size() - 1;
            }
            i--;
        }       
    }
    
    
    //método para asignar una facción/Tipo/Elemento a un Luchador de manera aleatoria
    private static String darType(){
       
       String[] typeList = { "Fire", "Water", "Earth"};
       
       int randomNum = ThreadLocalRandom.current().nextInt(0, typeList.length);
        
        String type = typeList[randomNum];

    return type;
    }
    
    
    //método para asignar la HP de un Luchador de manera aleatoria
    private static int darHpLuchador(){        
           
           int randomNum = ThreadLocalRandom.current().nextInt(200, 500 + 1);
           
           int HP = randomNum;
           
    return HP;
    }
    
    
    //método para asignar el ATK de un Luchador de manera aleatoria
    private static int darAtkLuchador(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(20, 70 + 1);
                
           int ATK = randomNum;
           
    return ATK;
    }
     private static int darDEF(){
    
          int randomNum = ThreadLocalRandom.current().nextInt(5, 25 + 1);
                
          int DEF = randomNum;
           
    return DEF;
    }
     
     
    //método para asignar la SPD de un Luchador o Monstruo de manera aleatoria
    private static int darSPD(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(10, 100 + 1);
                
           int SPD = randomNum;
           
    return SPD;
    }
     
     
    //método para asignar las estrellas de un Luchador basado un sistema de probabilidad
    private static int darRankLuchador(){
         
        //aqui se inicializa el "RANK" en "1", si el numero aleatorio no cumple con alguno de los "ifs", se mantiene en "1"
        
           int [] rankList = {40, 70, 85, 95};
           
           int randomNum = ThreadLocalRandom.current().nextInt(1, 100 + 1);
           
           int rank = 1;
           
           for(int i =0; i < rankList.length; i++){
           
               if (randomNum > rankList [i]){
               
                   rank = rank + 1;
               
               }
           }  
           
    return rank;
    }
    
    
    //este método muestra todas las estadíticas de un Luchador
    private static void mostrarLuchadorCompleto(Luchador Fighter) {
          
        
        //si el Luchador todavía posee el objeto "Empty", se muestra usando este codigo
        if (Fighter.item.nameItem .equals ("Empty")){
            
            System.out.println ("Name: " + Fighter.name);
            
            System.out.println ("Type: " + Fighter.type);
            
            System.out.println ("RANK: " + Fighter.rank);
            
            System.out.println ("HP: " + Fighter.hp);
            
            System.out.println ("ATK: " + Fighter.atk);
            
            System.out.println ("DEF: " + Fighter.def);
            
            System.out.println ("SPD: " + Fighter.spd);
            
            mostrarItem(Fighter.item);   
        }
        
        //si el Luchador posee cualquier otro objeto, se invoca al metodo necesario
        else{

            mostrarLuchadorConItem(Fighter);
        }
   }
   
   
    //este metodo muestra todas las estadisticas del Luchador, junto con el efecto de su objeto equipado
    private static void mostrarLuchadorConItem(Luchador Fighter){
        
        int hp = Fighter.hp;
        
        int atk = Fighter.atk;
        
        int def = Fighter.def;
        
        int spd = Fighter.spd;
        
        switch (Fighter.item.nameItem) {

            case "Boots": spd = (Fighter.spd + Fighter.item.value * Fighter.item.rankItem);
                break;
                
            case "Armor": hp = (Fighter.hp + Fighter.item.value * Fighter.item.rankItem);
                break;
                
            case "Sword": atk = (Fighter.atk + Fighter.item.value * Fighter.item.rankItem);
                break;
                
            case "Shield": def = (Fighter.def + Fighter.item.value * Fighter.item.rankItem);
                break;
        }
        
        System.out.println("");
        
        System.out.println ("Name: " + Fighter.name);
                
        System.out.println ("Type: " + Fighter.type);
                
        System.out.println ("RANK: " + Fighter.rank);
        
        System.out.println ("HP: " + hp);
                
        System.out.println ("ATK: " + atk);
                
        System.out.println ("DEF: " + def);
                
        System.out.println ("SPD: " + spd);
                
        mostrarItem(Fighter.item);
        
        System.out.println("");
      
        System.out.println("");
    }  
    
    
     //metodo para mostrar al Luchador "simplificado"
    private static void mostrarLuchadorSimple(Luchador Fighter) {
          
            System.out.println ("Name: " + Fighter.name);
            
            System.out.println ("Type: " + Fighter.type);
            
            System.out.println ("RANK: " + Fighter.rank);

   }
  
  
    //metodo para ver las estadísiticas de un Luchador especifico
    private static void mostrarUnLuchador(ArrayList <Luchador> list){
    
        //aqui se le muetsra al usuario lso nombres de los Luchadores que tiene y se le pregunta cual desea revisar
        System.out.println("Input the number of the Fighter you wish to evaluate.");
          
        for (int i = 0; i < list.size(); i++){
           
            System.out.println("");
               
            System.out.println(i + 1 + ") " + list. get (i).name );
           
        }
           
        System.out.println("");
           
        int NameAsk;
     
        Scanner scan = new Scanner(System.in);
     
        NameAsk = scan.nextInt();
        
        mostrarLuchadorCompleto(list.get(NameAsk - 1));
    }
    
    
 //metodo para equipar al Luchador con el objeto seleccionado
    private static void equipFighterWithItem(Luchador fighter, objetoEquipable item){
    
        fighter.item = item;   
    }
    
