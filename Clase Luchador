
//Esta es una lista de todos los datos/comandos/métodos que se utilizan de algún modo la clase "Luchador"

//Dado que esto es simplemente un "copiar pegar" del archivio "ejecutable" es poco probable que alguno de lso métodos funcione
//dados los límites de mis conocimientos de programación.

import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;


public class Luchador {
    
     //creación de la clase "Luchador"
    public static class Luchador{
        
        //inicialización de los atributos de la clase Luchador
        private String Name;
        
        private String Type;
        
        private int HP;
        
        private int ATK;
        
        private int DEF;
        
        private int SPD;
        
        private int RANK;
        
        private objetoEquipable ITEM;
        
        
   
        //constructor de la clase Luchador
        Luchador(){
            
            this.Name = darName();
            
            this.RANK = darRankLuchador();

            this.HP = darHP() * RANK;
            
            this.ATK = darATK() * RANK;
        
            this.DEF = darDEF() * RANK;
        
            this.SPD = darSPD() * RANK;
        
            this.Type = darType();
            
            this.ITEM = createItem0();
        }
        
    //los "gets" que se han necesitado hasta el momento, esta lista pudiese aumentar en el futuro
    public String getName(){
            return Name;}    
    
    public int getRank(){
            return RANK;} 
    
    public String getType(){
            return Type;} 
    }
    
    //método para crear un luchador de manera aleatoria 
    public static void crearLuchador(ArrayList <Luchador_MarceloBustos.Luchador> list){
        
        //este método crea un nuevo Luchador y muetsra sus estadísticas por pantalla
        
        //aqui se revisa cuantos Luchadores se tiene, de tenerse menos de 25 se crea uno nuevo
        if (list.size() < 25){
        
            list.add(new Luchador());  
         
            if(list.size() > 1){
                
                //invocacion el metodo que revisa los nombres repetidos
                checkName(list, list.get( list.size () - 1). getName());
          
            }
          
          System.out.println("Your new Fighter is: "); 
         
          //invocacion al metodo que muestra a un Luchador con todas sus estadisticas
            mostrarLuchadorCompleto(list.get(list.size()-1));
          
        }
    
        else{
            
        System.out.println("You cannot have any more fighters.");
        
        }
     }
 
    
     //método para eliminar un Luchador
    public static void eliminarLuchador(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker){

        //aqui se revisa si hay o no Luchadores creados, de no haberlos, se le informa al usuario y regresa al menu 
        if (list.isEmpty()){
        
            System.out.println("You have no fighters. Get your lazy ass in gear and recruit some.");
        }
        else{
        
            System.out.println("Which coward are you exiling?(Input number)");
            
            mostrarListaSimple(list);
        
            int numero;
     
            Scanner scan = new Scanner(System.in);
     
            numero = scan.nextInt();
            
             list.remove(numero - 1);
            
        }  
}
       
    //método para asignarle un nombre a un Luchador
    public static String darName(){
    
        //este método selciona uno de los 26 nombres disponibles de manera aleatoria y  se lo asigna al nuevo Luchador 
        int randomNum = ThreadLocalRandom.current().nextInt(1, 25 + 1);
        
        String nombre = "Insert Name";
        
        switch (randomNum) {
            
            case 1: nombre = "Jack";
                break;
                
            case 2: nombre = "Jill";
                break;
                
            case 3: nombre = "Peter";
                break;
                
            case 4: nombre = "Ayla";
                break;
                
            case 5: nombre = "Kirtash";
                break;
                
            case 6: nombre = "Lucy";
                break;
                
            case 7: nombre = "Mordecai";
                break;
            
            case 8: nombre = "Leliana";
                break; 
                
            case 9: nombre = "David";
                break; 
                
            case 10: nombre = "Lethaline";
                break; 
                
            case 11: nombre = "Asmodeus";
                break; 
                
            case 12: nombre = "Lilith";
                break; 
                
            case 13: nombre = "Marcus";
                break;
                
            case 14: nombre = "Morgana";
                break; 
                
            case 15: nombre = "Frederick";
                break; 
            
            case 16: nombre = "Krysta";
                break;
               
            case 17: nombre = "Kaiser";
                break;
                
            case 18: nombre = "Echo";
                break;
                
             case 19: nombre = "Zack";
                break;
                
            case 20: nombre = "Susan";
            break;
            
            case 21: nombre = "Hector";
             break;
            
            case 22: nombre = "Chain";
                break;
            
            case 23: nombre = "Soul";
                break;
            
            case 24: nombre = "Memphis";
                break;
            
            case 25: nombre = "Leroy";
                break;
                
            case 26: nombre = "Hana";
                break;
        }
   
        return nombre;
    }
    
    //método para revisar los nombres de los luchadroes y así evitar la repetición de nombres
    public static void checkName(ArrayList <Luchador_MarceloBustos.Luchador> list, String CheckName){
        
        //este método revisa el nombre del último Luchador creado y lo compara con todos los nombres de los Luchadores creados anteriormente
        //si el nombre del Luchador nuevo ya está en uso, invoca al método "darName", asigna un nuevo nombre y luego lo compara con los nombres de
        //los luchadores creados hasta que al nuevo Luchador se le asigne un nombre que no esté en uso

        for (int i = list.size() - 2; i >= 0; i--){
        
            if(list.get(i).getName() .equals( CheckName )){
                
                    list. get ( list.size () - 1).Name = darName();
                    
                    CheckName = list. get ( list.size () - 1).Name;
                    
                    i = list.size() - 2;
            }
        }       
    }
    
    //método para asignar una facción/Tipo/Elemento a un Luchador de manera aleatoria
    public static String darType(){
        
       int randomNum = ThreadLocalRandom.current().nextInt(1, 3 + 1);
        
        String Tipo = "Insert Type";
        
            switch (randomNum) {
            
            case 1: Tipo = "Fire";
                break;
                
            case 2: Tipo = "Water";
                break;
                
            case 3: Tipo = "Earth";
                break;
            }
 
    return Tipo;
    }
    
    //método para asignar la HP de un Luchador de manera aleatoria
    public static int darHP(){        
           
           int randomNum = ThreadLocalRandom.current().nextInt(200, 500 + 1);
           
           int HP = randomNum;
           
    return HP;
    }
    
    //método para asignar el ATK de un Luchadorde manera aleatoria
    public static int darATK(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(20, 70 + 1);
                
           int ATK = randomNum;
           
    return ATK;
    }
     
    //método para asignar la DEF de un Luchador de manera aleatoria
    public static int darDEF(){
    
          int randomNum = ThreadLocalRandom.current().nextInt(5, 25 + 1);
                
          int DEF = randomNum;
           
    return DEF;
    }
     
    //método para asignar la SPD de un Luchador de manera aleatoria
    public static int darSPD(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(10, 100 + 1);
                
           int SPD = randomNum;
           
    return SPD;
    }
     
    //método para asignar las estrellas de un Luchador basado un sistema de probabilidad
    public static int darRankLuchador(){
         
        //aqui se inicializa el "RANK" en "1", si el numero aleatorio no cumple con alguno de los "ifs", se mantiene en "1"
        
           int RANK = 1;
    
           int randomNum = ThreadLocalRandom.current().nextInt(1, 100 + 1);
                
           if (randomNum > 95){
           
               RANK = 5;
            }
           
           else{
               
               if (randomNum > 85){
               
                   RANK = 4;
                }
               
                    else{
                   
                        if(randomNum > 70){
                   
                        RANK = 3;                       
                        }
                     
                        else{
                        
                            if(randomNum > 40){
                        
                                RANK = 2;
                            }
                        }
                    }
            }
    return RANK;
    }
    
    //este método muestra todas las estadíticas de un Luchador
    public static void mostrarLuchadorCompleto( Fighter) {
          
        
        //si el Luchador todavía posee el objeto "Empty", se muestra usando este codigo
        if (Fighter.ITEM.nameItem .equals ("Empty")){
            
            System.out.println ("Name: " + Fighter.Name);
            
            System.out.println ("Type: " + Fighter.Type);
            
            System.out.println ("RANK: " + Fighter.RANK);
            
            System.out.println ("HP: " + Fighter.HP);
            
            System.out.println ("ATK: " + Fighter.ATK);
            
            System.out.println ("DEF: " + Fighter.DEF);
            
            System.out.println ("SPD: " + Fighter.SPD);
            
            mostrarItem(Fighter.ITEM);   
        }
        
        //si el Luchador posee cualquier otro objeto, se invoca al metodo necesario
        else{

            mostrarLuchadorConItem(Fighter);
        }
   }
    
    //este metodo muestra todas las estadisticas del Luchador, junto con el efecto de su objeto equipado
    public static void mostrarLuchadorConItem (Fighter){
        
        System.out.println("");
        
        System.out.println("");
        
        System.out.println("");

        switch (Fighter.ITEM.nameItem) {

            case "Boots": System.out.println ("Name: " + Fighter.Name);
                
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + (Fighter.SPD + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                mostrarItem(Fighter.ITEM);
                break;
                
            case "Armor": System.out.println ("Name: " + Fighter.Name);
                
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + (Fighter.HP + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
            case "Sword": System.out.println ("Name: " + Fighter.Name);
            
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + (Fighter.ATK + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
                
            case "Shield": System.out.println ("Name: " + Fighter.Name);
            
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + (Fighter.DEF + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
        }
      System.out.println("");
      
      System.out.println("");
      
      System.out.println("");  
    }   
    
    //metodo para mostrar al Luchador "simplificado"
    public static void mostrarLuchadorSimple(Fighter) {
          
            System.out.println ("Name: " + Fighter.Name);
            
            System.out.println ("Type: " + Fighter.Type);
            
            System.out.println ("RANK: " + Fighter.RANK);

   }
  
    //metodo para ver las estadísiticas de un Luchador especifico
    public static void mostrarUnLuchador(ArrayList <Luchador> list){
    
        //aqui se le muetsra al usuario lso nombres de los Luchadores que tiene y se le pregunta cual desea revisar
        System.out.println("Input the number of the Fighter you wish to evaluate.");
          
        for (int i = 0; i < list.size(); i++){
           
            System.out.println("");
               
            System.out.println(i + 1 + ") " + list. get (i).Name );
           
        }
           
        System.out.println("");
           
        int NameAsk;
     
        Scanner scan = new Scanner(System.in);
     
        NameAsk = scan.nextInt();
        
        mostrarLuchadorCompleto(list.get(NameAsk - 1));
    }
    
    //metodo para mostrar la lista completa de Luchadores con sus estadistica "simples"
    public static void mostrarListaSimple(Luchador> list){
        
        System.out.println("Start of Fighter list");
        
                for(int i = 0; i< list.size(); i++){
                    
                   System.out.println("");
                    
                   System.out.println("");
                    
                   System.out.print(i+1 + ")");
                               
                   mostrarLuchadorSimple(list.get(i));
                   
                   System.out.println("");
                    
                   System.out.println("");
                }
                
          System.out.println("End of Fighter list ");
    
    }
    
    //metodo para mostrar a todos los Luchadores con todos sus estadisticas
    public static void mostrarTodo(ArrayList <Luchador> list){
    
    System.out.println("Start of Fighter list");
    
                for(int i = 0; i< list.size(); i++){
                    
                   System.out.println("");
                    
                   System.out.println("");
                    
                   System.out.print(i+1 + ")");
                   
                   mostrarLuchadorCompleto(list.get(i));
                   
                   System.out.println("");
                   
                   System.out.println("");
                } 
          System.out.println("End of Fighter list ");
    }
    
    //metodo que mostrar los Luchadors de un "RANK" especifico
    public static void mostrarRank(ArrayList <Luchador> list, int RankAsk){
        
        System.out.println("Start of Fighter list");
        
                for(int i = 0; i< list.size(); i++){
                   
                   if(list.get(i).getRank() == RankAsk ){
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       mostrarLuchadorCompleto(list.get(i));
                       
                       System.out.println("");
                       
                       System.out.println("");
                    }  
                }
                
          System.out.println("End of Fighter list ");
        
    
    }
    
     //metodo que muestra a todos los luchadores de un Tipo/elemento especifico
    public static void mostrarType(ArrayList <Luchador> list , int TypeAsk){

        String CheckType = "";
        
        //aqui se revisa cual fue el Tipo/Elemento pedido por el usuario
        switch (TypeAsk){
               
               case 1: CheckType = "Fire";
               break;
               
               case 2: CheckType = "Water";
               break;
               
               case 3: CheckType = "Earth";
               break;
        }
        
        //aqui se muetsra todos los Luchadores del Tipo/Elemetnos pedido
        System.out.println("Start of Fighter list");
        
                int j=1;
        
                for(int i = 0; i< list.size(); i++){
                   
                   if(list.get(i).getType() .equals( CheckType )){
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       System.out.print("j)");
                       
                       mostrarLuchadorCompleto(list.get(i));
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       j++;
                      }  
                }    
          System.out.println("End of Fighter list ");
    }
    
    
}
