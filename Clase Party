/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package juego_estrategia_prototype;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

/**
 *
 * @author marclo
 */
public class Party {
    
    
     //metodo que pregunta que tipo de party se queire, random o selccionada
    public static void makePartyAsk(ArrayList <Luchador> party, ArrayList <Luchador> list, ArrayList <String> checker){
    
        
        System.out.println("");
        
        System.out.println("Do you want a random party?(input number))");

        System.out.println("1) yes");

        System.out.println("2) no");
        
        Scanner scan = new Scanner(System.in);
     
        int numero = scan.nextInt();
        
        int partySize;
        
        if (list.size() < 6){
            
            partySize = list.size();
        }
        else{
            partySize = 6;
        }
        
        makeParty(party, list, numero, partySize,checker);
    }

    //metodo para crear una "Party"
    private static void makeParty(ArrayList <Luchador> party, ArrayList <Luchador> list, int numero, int partySize, ArrayList <String> checker){
 
        int i = 0;
        
        while (i < partySize){

            switch (numero) {
                case 1: addPartyRandom(party,list);
                    break;
                    
                case 2: addPartyAsk(party,list);
                    break;
                    
                default: System.out.println("THAT'S NOT ONE OF THE OPTIONS YOU MORON!!!!!!");
                
                    i=7;
                    
                    Menu.checkError(checker);
                    break;
            }
            if ( (i > 0) & (party.size() > 0)){
                
                boolean nameCheck = checkNameParty( party);
                
                if(nameCheck == true){
                
                ListaLuchadores.eliminarLuchador(party, party.size()-1, checker); 
                
                i--;
                
                if(numero == 2){ System.out.println("");
                
                    System.out.println("You can't cheat like that, Idiot.");
                    
                    System.out.println("");
                    }
                }
            }
            i++;
        }
    }
   
    //metodo para preguntar que Lucadores se usarán en la party
    private static void addPartyAsk(ArrayList <Luchador> party, ArrayList <Luchador> list){
    
    ListaLuchadores.mostrarTodoLuchador(list);
    
    int numero;
     System.out.println("Choose a Fighter. (input number)");
     
        Scanner scan = new Scanner(System.in);
        
        ListaLuchadores.mostrarTodoLuchador(list);
     
        numero = scan.nextInt();
        
        if(numero <= list.size()){
            
            moveToParty(list,party,(numero-1));       
        }
        else{
            
            System.out.println("STOP TRYING TO CHEAT!!!!!");
        }
    }
    
    //metodo para crear una party "random"
    private static void addPartyRandom(ArrayList <Luchador> party, ArrayList <Luchador> list){
        
         int randomNum = ThreadLocalRandom.current().nextInt(1, list.size() + 1);
        
         moveToParty(list,party,(randomNum -1));       
    }
    
    //metodo para mover los Luhadores desde el "LIstado" hacia la "Party"
    private static void moveToParty (ArrayList <Luchador> list, ArrayList <Luchador> party, int fighterNum) {

        Luchador copia = list.get(fighterNum);
        
        party.add( copia); 
    }
    
    //variante del método "checkName" que asegura que no se repitan miembros en la Party
    private static boolean checkNameParty(ArrayList <Luchador> party){
         
        boolean a = false;

        int i = party.size() - 2;
        
        int j = party.size() - 1;
        
        while ( i >= 0){
                        
            if(party.get(i).getName() .equals ( party.get(j).getName() )){
                
                a = true;
            }
            i--;
        }  
        return a;
    }
    
    //metodo que revisa si un Luchador esta vivo en la party
    public static boolean checkHP(Combatiente fighter){
        
        boolean alive = true;
        
        if (fighter.getHP() < 1){
        
            alive = false;
        }
        return alive;
    }
     
    //metodo que revisa si un Luchador ha sobrevivido al combate
    public static void returnToList(ArrayList <Luchador> party,ArrayList <Luchador> list, ArrayList <String> checker){        
        
        for (int i = 0; i < party.size(); i++){
            
            if(checkHP(party.get(i)) == false ){
                
               deadFighter(party.get(i).getName(), list, checker);} 
        }  
        
        party.clear();
    }
    
    //metodo que elimina de la lsita a los Luchadores muertos en combate
    private static void deadFighter(String name, ArrayList <Luchador> list, ArrayList <String> checker){
        
        for(int i =0; i < list.size(); i++){
        
            if(name .equals (list.get(i).getName()) ){
        
                ListaLuchadores.eliminarLuchador(list, i, checker);
            }
        }    
    }
}
