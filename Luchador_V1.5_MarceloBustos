/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package juego_luchador;

import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.util.ArrayList;

/**
 *
 * @author marclo
 */

//DISCLAIMER

//This is an incomplete program, as such, it has various place-holders that do nothing other than presenting a message.

//These place-holders will eventually be replaced with functioning lines of code.

//Because I am still learning, some parts of the program are made with non optimal code, these sectiosn will eventually be replaced
//as I gain more knowledge and experience.

//Porque no puedo dejar de cambiar de un idioma al otro mientras programo, algunas partes del programa se presentan en Inglés y 
//otras en Español.


//WARNING

//This program keeps track of how many times you try to use a non-exiting command (or you simply make a mistake)
//do this too many times and the program WILL CLOSE itself. This IS INTENTIONAL.


//COMMENTS

//The only way to acquire Items is by fighting monsters. As of this version, that function only displays a message and adds an item to the inventory
//IF, there is enough space, otherwise it only displays a message.

//This file is an update of the previous one. In thsi version all the "vecotrs" have been substituted with "ArrayLists"
//as well as adding a few new features, such as seeing the effect of an equipped Item and new filters for the Fighter list.

public class Luchador_MarceloBustos {

    /**
     * @param args the command line arguments
     */
    
    //método para mostrar el menú por pantalla
    public static void menu(int checker, ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory){
         
     System.out.println();
     
     System.out.println();
     
    
    if(checker < 4){
     System.out.println("Welcome to Monster Slayer. You have " + list.size() + " Fighter(s).");
     
     System.out.println("What is your command?");
     
     System.out.println("1) Check Fighters.");
     
     System.out.println("2) Check Inventory.");
     
     System.out.println("3) Create Fighter.");
     
     System.out.println("4) Dismiss a Fighter.");
     
     System.out.println("5) FIGHT!!!!!!!");
     
     System.out.println("6) Wuss out(leave).");
     
     System.out.println();
     
     System.out.println();
     
     //invocación a "respuesta menu" para que el usuario interactué con el juego
     respuestaMenu(checker, list, inventory);
        
       }
    else {
    
        System.out.println("THAT'S IT. I'M OUT.");
        
        System.out.println();
                        
        System.out.println();
        
        System.out.println("You pissed off a battle game and made it close itself.");
        
        System.out.println();
                        
        System.out.println("Are you proud of that?");
        
    }
    
     }
     
    //método que permite la interacción con el usuario al leer su input y llamar al método correspondiente
    public static void respuestaMenu(int checker, ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory){
    
        //variable usada para leer el comando del usuario
            int numero;
     
            Scanner scan = new Scanner(System.in);
     
            numero = scan.nextInt();
        
            //invocación al método correspondiente al comand ingresado por el usuario
            //tódos los comandos terminan invocando nuevamente al método "menu",excepto el comando 6 (Wuss out) 
            switch (numero) {
            
                case 1: mostrarListaAsk(list, inventory, checker);
            
                    menu(checker, list, inventory);
                break;
                
                case 2: verInventario(inventory);
            
                    menu(checker, list, inventory);
                break;
                
                case 3: crearLuchador (list);

                    menu(checker, list, inventory);
                break;
                
                case 4: eliminarLuchador(list, inventory, checker);
                
                    menu(checker, list, inventory);
                break;
                
                case 5:fight(inventory);
            
                    menu(checker, list, inventory);
                break;
                
                case 6: System.out.println("You COWARD. Come back when you find your courage.");
                break;
                
                
               //aquí se registra cada vez que el usuario intenta usar un comando que no existe en el juego
                //usar demasiados conmandos invalidos cierra el jeugo y despliega un mensaje iformando al usuario
                //la variable "checker" es la que es usada para llevar la cuenta de cuantos coamndos errados se han usado
                default: 
                    switch (checker) {
                        
                        case 0:
                            
                            System.out.println(); 
                        
                            System.out.println();
                            
                            System.out.println("How about you stick to the AVAILABLE comamands?");
                        
                            System.out.println();
                        
                            System.out.println();
                        break;
                        
                    case 1:
                        
                        System.out.println();
                        
                        System.out.println();
                        
                        System.out.println("I'm warning you.");
                        
                        System.out.println();
                        
                        System.out.println();
                    break;
                      
                    case 2:
                        
                        System.out.println();
                        
                        System.out.println();
                        
                        System.out.println("Last chance wise guy.");
                        
                        System.out.println();
                        
                        System.out.println();
                    break;
                        
                    default:
                    break;
            }
                    
                    checker ++;
                
                    menu(checker, list, inventory);
                    break;
            }
        }

    //método para mostrar el inventario
    public static void verInventario(ArrayList <objetoEquipable> inventory){
        
        //este método muestra todos los objetos que el usuario posee en su inventario      
        System.out.println();
        
        System.out.println();
        
        if(inventory.size() > 0){
        
            System.out.println("Inventory start.");
        
            System.out.println();
        
            for(int i = 0; i< inventory.size(); i++){
            
                   System.out.print(i+1 + ")");
                   
                   mostrarItem(inventory.get(i));
            }
            
            System.out.println("");
            
            System.out.println("");
        
            System.out.println("Inventory end"); 
        
            System.out.println("");
            
            System.out.println("");
        }
        
        else {
            System.out.println("");
            
            System.out.println("");
            
            System.out.println("You have no items in your inventory.");
            
            System.out.println("");
            
            System.out.println("");
        }
     }
   
    //método para pelear contra un monstruo (actualmente en desarrollo)
    public static void fight(ArrayList <objetoEquipable> inventory){
        
    //This is a place-holder
    
     System.out.println("");
     
     System.out.println("");
    
     System.out.println("This function is under development.");
     
     System.out.println("");
     
     System.out.println("");
     
     
     ///aqui se revisa el tamaño del inentario, de haber menos de 10 items, se agrega uno
     if (inventory.size() < 10){
         
         System.out.println("");
         System.out.println("");
     
         System.out.println("Here, have a free item."); 
         
         System.out.println("");
         System.out.println("");
         
         //creacion del nuevo objeto
         objetoEquipable item = createItem();
         
         //aqui se agrega el nuevo objeto al inventario
         inventory.add(item);
        }
     }
    
    //creación de la clase "Luchador"
    public static class Luchador{
        
        //inicialización de los atributos de la clase Luchador
        private String Name;
        
        private String Type;
        
        private int HP;
        
        private int ATK;
        
        private int DEF;
        
        private int SPD;
        
        private int RANK;
        
        private objetoEquipable ITEM;
        
        
   
        //constructor de la clase Luchador
        Luchador(){
            
            this.Name = darName();
            
            this.RANK = darRankLuchador();

            this.HP = darHP() * RANK;
            
            this.ATK = darATK() * RANK;
        
            this.DEF = darDEF() * RANK;
        
            this.SPD = darSPD() * RANK;
        
            this.Type = darType();
            
            this.ITEM = createItem0();
        }
        
    //los "gets" que se han necesitado hasta el momento, esta lista pudiese aumentar en el futuro
    public String getName(){
            return Name;}    
    
    public int getRank(){
            return RANK;} 
    
    public String getType(){
            return Type;} 
    }
    
    //creación de la clase "objetoEquipable"
    public static class objetoEquipable{

   //inicialización de los atributos de la clase pbjetoEquipable
    String nameItem;
    
    int rankItem;
    
    int value;
    
    String stat;
    
    //constructor de la clase "objetoEquiable"
    objetoEquipable(){
        
            this.nameItem = "Empty";
            
            this.value = 0;
            
            this.rankItem = 0;
            
            this.stat = "None";
        }
    }
    
     //método para crear un luchador de manera aleatoria 
    public static void crearLuchador(ArrayList <Luchador> list){
        
        //este método crea un nuevo Luchador y muetsra sus estadísticas por pantalla
        
        //aqui se revisa cuantos Luchadores se tiene, de tenerse menos de 25 se crea uno nuevo
        if (list.size() < 25){
        
            list.add(new Luchador());  
         
            if(list.size() > 1){
                
                //invocacion el metodo que revisa los nombres repetidos
                checkName(list, list.get( list.size () - 1). getName());
          
            }
          
          System.out.println("Your new Fighter is: "); 
         
          //invocacion al metodo que muestra a un Luchador con todas sus estadisticas
            mostrarLuchadorCompleto(list.get(list.size()-1));
          
        }
    
        else{
            
        System.out.println("You cannot have any more fighters.");
        
        }
     }
    
    //método para crear un objetoEquipable "vacio". La idea de este método es ser usado para completar la creación de un Luchador.
    public static objetoEquipable createItem0(){
    
        //aqui se crea el objeto equipable "Empty", el cual no posee estadísticas.
        
        //este metodo es usado sólo durante la creación de un nuevo Luchador
        objetoEquipable item0 = new objetoEquipable();
    
        item0.nameItem = "Empty";
        
        item0.rankItem = 0;
        
        item0.stat = "None";
        
        item0.value = 0;
        
        return item0;
    }
    
    //método para eliminar un Luchador
    public static void eliminarLuchador(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker){

        //aqui se revisa si hay o no Luchadores creados, de no haberlos, se le informa al usuario y regresa al menu 
        if (list.isEmpty()){
        
            System.out.println("You have no fighters. Get your lazy ass in gear and recruit some.");
            
            menu(checker, list, inventory);
        }
        else{
        
            System.out.println("Which coward are you exiling?(Input number)");
            
            mostrarListaSimple(list);
        
            int numero;
     
            Scanner scan = new Scanner(System.in);
     
            numero = scan.nextInt();
            
             list.remove(numero - 1);
            
        }  
}
       
    //método para asignarle un nombre a un Luchador
    public static String darName(){
    
        //este método selciona uno de los 26 nombres disponibles de manera aleatoria y  se lo asigna al nuevo Luchador 
        int randomNum = ThreadLocalRandom.current().nextInt(1, 25 + 1);
        
        String nombre = "Insert Name";
        
        switch (randomNum) {
            
            case 1: nombre = "Jack";
                break;
                
            case 2: nombre = "Jill";
                break;
                
            case 3: nombre = "Peter";
                break;
                
            case 4: nombre = "Ayla";
                break;
                
            case 5: nombre = "Kirtash";
                break;
                
            case 6: nombre = "Lucy";
                break;
                
            case 7: nombre = "Mordecai";
                break;
            
            case 8: nombre = "Leliana";
                break; 
                
            case 9: nombre = "David";
                break; 
                
            case 10: nombre = "Lethaline";
                break; 
                
            case 11: nombre = "Asmodeus";
                break; 
                
            case 12: nombre = "Lilith";
                break; 
                
            case 13: nombre = "Marcus";
                break;
                
            case 14: nombre = "Morgana";
                break; 
                
            case 15: nombre = "Frederick";
                break; 
            
            case 16: nombre = "Krysta";
                break;
               
            case 17: nombre = "Kaiser";
                break;
                
            case 18: nombre = "Echo";
                break;
                
             case 19: nombre = "Zack";
                break;
                
            case 20: nombre = "Susan";
            break;
            
            case 21: nombre = "Hector";
             break;
            
            case 22: nombre = "Chain";
                break;
            
            case 23: nombre = "Soul";
                break;
            
            case 24: nombre = "Memphis";
                break;
            
            case 25: nombre = "Leroy";
                break;
                
            case 26: nombre = "Hana";
                break;
        }
   
        return nombre;
    }
    
    //método para revisar los nombres de los luchadroes y así evitar la repetición de nombres
    public static void checkName(ArrayList <Luchador> list, String CheckName){
        
        //este método revisa el nombre del último Luchador creado y lo compara con todos los nombres de los Luchadores creados anteriormente
        //si el nombre del Luchador nuevo ya está en uso, invoca al método "darName", asigna un nuevo nombre y luego lo compara con los nombres de
        //los luchadores creados hasta que al nuevo Luchador se le asigne un nombre que no esté en uso

        for (int i = list.size() - 2; i >= 0; i--){
        
            if(list.get(i).getName() .equals( CheckName )){
                
                    list. get ( list.size () - 1).Name = darName();
                    
                    CheckName = list. get ( list.size () - 1).Name;
                    
                    i = list.size() - 2;
            }
        }       
    }
    
    //método para asignar una facción/Tipo/Elemento a un Luchador de manera aleatoria
    public static String darType(){
        
       int randomNum = ThreadLocalRandom.current().nextInt(1, 3 + 1);
        
        String Tipo = "Insert Type";
        
            switch (randomNum) {
            
            case 1: Tipo = "Fire";
                break;
                
            case 2: Tipo = "Water";
                break;
                
            case 3: Tipo = "Earth";
                break;
            }
 
    return Tipo;
    }
    
    //método para asignar la HP de un Luchador de manera aleatoria
    public static int darHP(){        
           
           int randomNum = ThreadLocalRandom.current().nextInt(200, 500 + 1);
           
           int HP = randomNum;
           
    return HP;
    }
    
    //método para asignar el ATK de un Luchadorde manera aleatoria
    public static int darATK(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(20, 70 + 1);
                
           int ATK = randomNum;
           
    return ATK;
    }
     
    //método para asignar la DEF de un Luchador de manera aleatoria
    public static int darDEF(){
    
          int randomNum = ThreadLocalRandom.current().nextInt(5, 25 + 1);
                
          int DEF = randomNum;
           
    return DEF;
    }
     
    //método para asignar la SPD de un Luchador de manera aleatoria
    public static int darSPD(){
    
           int randomNum = ThreadLocalRandom.current().nextInt(10, 100 + 1);
                
           int SPD = randomNum;
           
    return SPD;
    }
     
    //método para asignar las estrellas de un Luchador basado un sistema de probabilidad
    public static int darRankLuchador(){
         
        //aqui se inicializa el "RANK" en "1", si el numero aleatorio no cumple con alguno de los "ifs", se mantiene en "1"
        
           int RANK = 1;
    
           int randomNum = ThreadLocalRandom.current().nextInt(1, 100 + 1);
                
           if (randomNum > 95){
           
               RANK = 5;
            }
           
           else{
               
               if (randomNum > 85){
               
                   RANK = 4;
                }
               
                    else{
                   
                        if(randomNum > 70){
                   
                        RANK = 3;                       
                        }
                     
                        else{
                        
                            if(randomNum > 40){
                        
                                RANK = 2;
                            }
                        }
                    }
            }
    return RANK;
    }
    
    //método para preguntar con qué filtros se desea ver la lista de Luchadores
    public static void mostrarListaAsk(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker){
        
        //este método pregunta al usuario que filtros desea aplicar a la lista de Luchadores y luego invoca a un metodo que interpreta la respuesta del usuario
        
        //de no tener Luchadores, el método despliega un mensaje indicándoselo al usuario y regresa al menu
        
        if (list.isEmpty()){
        
            System.out.println("You have no fighters.");
            
            menu(checker, list,  inventory);
        }
        
        else{
           System.out.println("Which ones do you want to see? (Input number)");
           
           System.out.println("");
          
           System.out.println("1) All of them (simplified).");
           
           System.out.println("");
           
           System.out.println("2) All of them (with all their stats).");
           
           System.out.println("");
           
           System.out.println("3) The stats of a specific Fighter.");
           
           System.out.println("");
          
           System.out.println("4) Specific Rank.");
           
           System.out.println("");
           
           System.out.println("5) Specific Type.");
           
           System.out.println("");
           
           System.out.println("");
              
           int respuesta;
     
           Scanner scan = new Scanner(System.in);
     
           respuesta = scan.nextInt();
           
           respuestaMostrarLista(list, inventory, checker, respuesta);
        }     
    } 
    
    //metodo que invoca a los metodos necesarios para mostrar la lista con los filtros deseados
    public static void respuestaMostrarLista(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker, int respuesta){
    
         switch (respuesta){
               
               case 1: System.out.println("Item Effects have already been added.");
               
               System.out.println("");
                   
                   mostrarListaSimple (list);
               break;
               
               case 2: System.out.println("Item Effects have already been added.");
               
               System.out.println("");
                   
                   mostrarTodo (list);
               break;
               
               case 3: System.out.println("Item Effects have already been added.");
               
               System.out.println("");
                   
                   mostrarUnLuchador(list);
               break;
               
               case 4: System.out.println("Item Effects have already been added.");
               
               System.out.println("");
                   
                   mostrarRankAsk (list);
               break;
               
               case 5: System.out.println("Item Effects have already been added.");
               
               System.out.println("");
               
               System.out.println("");
                   
               mostrarTypeAsk (list);
                   
               System.out.println("");
                   
               System.out.println("");
               break;
               
               default: System.out.println ("Try Again.");
               
               
               System.out.println("");
               
               System.out.println("");
               
               System.out.println("");
                         
               mostrarListaAsk (list, inventory, checker);
               break;
            }     
            
           equipItemsAsk(list, inventory, checker);
    }
    
    //este método muestra todas las estadíticas de un Luchador
    public static void mostrarLuchadorCompleto(Luchador Fighter) {
          
        
        //si el Luchador todavía posee el objeto "Empty", se muestra usando este codigo
        if (Fighter.ITEM.nameItem .equals ("Empty")){
            
            System.out.println ("Name: " + Fighter.Name);
            
            System.out.println ("Type: " + Fighter.Type);
            
            System.out.println ("RANK: " + Fighter.RANK);
            
            System.out.println ("HP: " + Fighter.HP);
            
            System.out.println ("ATK: " + Fighter.ATK);
            
            System.out.println ("DEF: " + Fighter.DEF);
            
            System.out.println ("SPD: " + Fighter.SPD);
            
            mostrarItem(Fighter.ITEM);   
        }
        
        //si el Luchador posee cualquier otro objeto, se invoca al metodo necesario
        else{

            mostrarLuchadorConItem(Fighter);
        }
   }
    
    //este metodo muestra todas las estadisticas del Luchador, junto con el efecto de su objeto equipado
    public static void mostrarLuchadorConItem(Luchador Fighter){
        
        System.out.println("");
        
        System.out.println("");
        
        System.out.println("");

        switch (Fighter.ITEM.nameItem) {

            case "Boots": System.out.println ("Name: " + Fighter.Name);
                
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + (Fighter.SPD + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                mostrarItem(Fighter.ITEM);
                break;
                
            case "Armor": System.out.println ("Name: " + Fighter.Name);
                
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + (Fighter.HP + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
            case "Sword": System.out.println ("Name: " + Fighter.Name);
            
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + (Fighter.ATK + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("DEF: " + Fighter.DEF);
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
                
            case "Shield": System.out.println ("Name: " + Fighter.Name);
            
                System.out.println ("Type: " + Fighter.Type);
                
                System.out.println ("RANK: " + Fighter.RANK);
                
                System.out.println ("HP: " + Fighter.HP);
                
                System.out.println ("ATK: " + Fighter.ATK);
                
                System.out.println ("DEF: " + (Fighter.DEF + Fighter.ITEM.value * Fighter.ITEM.rankItem));
                
                System.out.println ("SPD: " + Fighter.SPD);
                
                mostrarItem(Fighter.ITEM);
                break;
        }
      System.out.println("");
      
      System.out.println("");
      
      System.out.println("");  
    }   
    
    //metodo para mostrar al Luchador "simplificado"
    public static void mostrarLuchadorSimple(Luchador Fighter) {
          
            System.out.println ("Name: " + Fighter.Name);
            
            System.out.println ("Type: " + Fighter.Type);
            
            System.out.println ("RANK: " + Fighter.RANK);

   }
  
    //metodo para ver las estadísiticas de un Luchador especifico
    public static void mostrarUnLuchador(ArrayList <Luchador> list){
    
        //aqui se le muetsra al usuario lso nombres de los Luchadores que tiene y se le pregunta cual desea revisar
        System.out.println("Input the number of the Fighter you wish to evaluate.");
          
        for (int i = 0; i < list.size(); i++){
           
            System.out.println("");
               
            System.out.println(i + 1 + ") " + list. get (i).Name );
           
        }
           
        System.out.println("");
           
        int NameAsk;
     
        Scanner scan = new Scanner(System.in);
     
        NameAsk = scan.nextInt();
        
        mostrarLuchadorCompleto(list.get(NameAsk - 1));
    }
    
    //metodo para mostrar la lista completa de Luchadores con sus estadistica "simples"
    public static void mostrarListaSimple(ArrayList <Luchador> list){
        
        System.out.println("Start of Fighter list");
        
                for(int i = 0; i< list.size(); i++){
                    
                   System.out.println("");
                    
                   System.out.println("");
                    
                   System.out.print(i+1 + ")");
                               
                   mostrarLuchadorSimple(list.get(i));
                   
                   System.out.println("");
                    
                   System.out.println("");
                }
                
          System.out.println("End of Fighter list ");
    
    }
    
    //metodo para mostrar a todos los Luchadores con todos sus estadisticas
    public static void mostrarTodo(ArrayList <Luchador> list){
    
    System.out.println("Start of Fighter list");
    
                for(int i = 0; i< list.size(); i++){
                    
                   System.out.println("");
                    
                   System.out.println("");
                    
                   System.out.print(i+1 + ")");
                   
                   mostrarLuchadorCompleto(list.get(i));
                   
                   System.out.println("");
                   
                   System.out.println("");
                } 
          System.out.println("End of Fighter list ");
    }
    
    //metodo que le pregunta al usuario que "RANK" de Luchadores desea ver e invoca al metodo necesario para mostrar dlos Luchadores pedidos
    public static void mostrarRankAsk(ArrayList <Luchador> list){
        
        System.out.println("Which Ranked warriors do you wish to see?");
        
        System.out.println("");
        
        System.out.println("1) RANK 1");
        
        System.out.println("");
        
        System.out.println("2) RANK 2");
        
        System.out.println("");
        
        System.out.println("3) RANK 3");
        
        System.out.println("");
        
        System.out.println("4) RANK 4");
        
        System.out.println("");
        
        System.out.println("5) RANK 5");
        
        System.out.println("");
    
        int RankAsk;
     
        Scanner scan = new Scanner(System.in);
     
        RankAsk = scan.nextInt();
        
        mostrarRank (list, RankAsk);   
    }
    
    //metodo que mostrar los Luchadors de un "RANK" especifico
    public static void mostrarRank(ArrayList <Luchador> list, int RankAsk){
        
        System.out.println("Start of Fighter list");
        
                for(int i = 0; i< list.size(); i++){
                   
                   if(list.get(i).getRank() == RankAsk ){
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       mostrarLuchadorCompleto(list.get(i));
                       
                       System.out.println("");
                       
                       System.out.println("");
                    }  
                }
                
          System.out.println("End of Fighter list ");
        
    
    }
    
    //metodo que le pregunta al usuario que Tipo/elemento de Luchadores desea ver e invoca al metodo necesario para mostrarlos
    public static void mostrarTypeAsk(ArrayList <Luchador> list){
        
        System.out.println("Which warrior Type do you wish to see?(Input number)");
        
        System.out.println("1) Fire.");
        
        System.out.println("");
        
        System.out.println("2) Water.");
        
        System.out.println("");
        
        System.out.println("3) Earth.");
        
        System.out.println("");
        
        int TypeAsk;
     
        Scanner scan = new Scanner(System.in);
     
        TypeAsk = scan.nextInt();
        
        mostrarType (list, TypeAsk);   
    }
    
     //metodo que muestra a todos los luchadores de un Tipo/elemento especifico
    public static void mostrarType(ArrayList <Luchador> list , int TypeAsk){

        String CheckType = "";
        
        //aqui se revisa cual fue el Tipo/Elemento pedido por el usuario
        switch (TypeAsk){
               
               case 1: CheckType = "Fire";
               break;
               
               case 2: CheckType = "Water";
               break;
               
               case 3: CheckType = "Earth";
               break;
        }
        
        //aqui se muetsra todos los Luchadores del Tipo/Elemetnos pedido
        System.out.println("Start of Fighter list");
        
                int j=1;
        
                for(int i = 0; i< list.size(); i++){
                   
                   if(list.get(i).getType() .equals( CheckType )){
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       System.out.print("j)");
                       
                       mostrarLuchadorCompleto(list.get(i));
                       
                       System.out.println("");
                       
                       System.out.println("");
                       
                       j++;
                      }  
                }    
          System.out.println("End of Fighter list ");
    }

    //método para mostrar un objetoEquipable
    public static void mostrarItem(objetoEquipable item){
          
        //este método  muestra el nombre y estadísticas del objeto seleccionado
        //este método es llamado tanto como para mostrar el inventario, como para mostrar todas las estadísticas del Luchador
        String Empty = "Empty";
        
        if(item. nameItem. equals( Empty )){
            
          System.out.println(item.nameItem);
        }
        
        else{
            
           System.out.println("Item Name: " + item.nameItem);
           
           System.out.println("Item Rank: " + item.rankItem);
           
           System.out.println("Improved Stat: " + item.stat);
           
           System.out.println("Stat improvement: +" + item.value * item.rankItem);
           
           System.out.println("");
           
           System.out.println("");
        }  
      }
      
    //método para preguntarle al usuario si desea equipar un objeto a un Luchador, de no tener objetos, se le informa al Usuario
    public static void equipItemsAsk(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker){
       
        System.out.println("");
        
        System.out.println("");
        
        if( inventory.size() > 0){
        
        System.out.println("Do you wish to equip items? (WARNING: This action CANNOT be undone.)(Input number)");
        
        System.out.println("");
     
        System.out.println("1) Yes.");
        
        System.out.println("");
        
        System.out.println("2) No.");
        
        System.out.println("");
        
        System.out.println("3) I'd rather destroy one.");
        
        System.out.println("");
        
        int numero;
     
        Scanner scan = new Scanner(System.in);
     
        numero = scan.nextInt();
        
        respuestaEquipItemsAsk(numero, list, inventory, checker);
    }
         else{
                System.out.println("You have no items. How about you out there and KILL something?");
         }
      }
    
    //metodo que interpreta la respuesta del usuario e invoca al metodo necesario para cumplirla
    public static void respuestaEquipItemsAsk(int numero, ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory, int checker){
    
         switch(numero){
    
        case 1: System.out.println("");
                
                System.out.println("");
                 
                equipItemsChoose(list, inventory);
            break;
    
        case 2: System.out.println("OK, let's just leave them there, gathering dust.");
        
                System.out.println("");
                
                System.out.println("");
            break;
    
        case 3: System.out.println("Are you sure about that?");    
         
                System.out.println("");
                
                System.out.println("");
         
                System.out.println("");
                
                System.out.println("1) Yes");
                
                System.out.println("");
                
                System.out.println("2) No");
                
                int itemAsk;
     
                Scanner scan = new Scanner(System.in);
                
                itemAsk = scan.nextInt();
                
                switch(itemAsk){
    
                    case 1: System.out.println("");
                            
                        System.out.println("Sorry, but this function is under development.");

                        System.out.println("");
                        break;
                        
                    case 2: System.out.println("");
                    
                        System.out.println("That's what I thought.");
                        
                        System.out.println("");
                        break;
                        
                    default:
                        System.out.println("Try again.");
                        
                        System.out.println("");
                        
                        System.out.println("");
        
                        equipItemsAsk( list, inventory, checker);
                        break;
                }
            break;

        default:System.out.println("Try again.");
        
        checker ++;
        
        equipItemsAsk( list, inventory, checker);
        break;
        }
    }
      
    //metodo quele pregunta al Usuario "que?" objeto desea equipar a "cual?" Luchador y luego invoca a los metodos necesarios para equipar y borrar el objeto del inverntario
    public static void equipItemsChoose(ArrayList <Luchador> list, ArrayList <objetoEquipable> inventory){
    
        System.out.print("Which Fighter do you wish to equip with an Item?(Input number)");
        
        System.out.println("");
        
        mostrarListaSimple(list);
        
        int fighterNum;
        
        Scanner scan1 = new Scanner(System.in);
                
        fighterNum = scan1.nextInt(); 
        
        System.out.println("Which Item do you wish to equip?");
        
        System.out.println("");
        
        verInventario(inventory);
        
        int itemNum;
        
        Scanner scan2 = new Scanner(System.in);
                
        itemNum = scan2.nextInt();
        
        equipFighterWithItem(list.get(fighterNum - 1), inventory.get(itemNum -1));
        
        deleteItemFromInventory(inventory, itemNum -1);
    }
    
    //metodo para equipar al Luchador con el objeto seleccionado
    public static void equipFighterWithItem(Luchador fighter, objetoEquipable item){
    
        fighter.ITEM = item;   
    }
    
    //metodo para borrar el obejto equipado de la lista del inventario
    public static void deleteItemFromInventory(ArrayList <objetoEquipable> inventory, int itemNum){
    
        inventory.remove(itemNum);
    
    }
    
    //método para crear objetos (para ser llamada cuando muere un mostruo, función en desarrollo)
    public static objetoEquipable createItem(){
        
        objetoEquipable Item = new objetoEquipable();
        
        Item.nameItem = darItemName();
        
        Item.rankItem = darItemRank();
        
        Item.stat = darItemStat(Item.nameItem);
        
        int itemValue = darItemValue() * Item.rankItem;
        
        Item.value = itemValue;
        
        return Item;
    }
    
    //metodo que le asigna un nombre al objeto, basado en que estadistica mejora
    public static String darItemName(){
    
        String itemName = new String();
    
        int randomNum = ThreadLocalRandom.current().nextInt(1, 4 + 1);
           
        int chooseItemName = randomNum;
        
        switch(chooseItemName){
        
            case 1: itemName = "Armor";
            break;
            
            case 2: itemName = "Sword";
            break;
            
            case 3: itemName = "Shield";
            break;
            
            case 4: itemName = "Boots";
            break;
        }
        
        return itemName;
    }
    
    //metodo que le asigna un "RANK" al objetoEquipable, basado un sistema de probalidades
    public static int darItemRank(){
    
       int itemRank = 1;
    
           int randomNum = ThreadLocalRandom.current().nextInt(1, 100 + 1);
                
           if (randomNum == 100){
           
               itemRank = 10;
           }
           
           else{
               
               if (randomNum > 97){
               
                   itemRank = 9;
                   
                 }
               
                    else{
                   
                        if(randomNum > 94){
                   
                        itemRank = 8;                       
                       
                        }
                     
                        else{
                            if(randomNum > 90){
                        
                                itemRank = 7;
                            }
                            else{
                                if(randomNum > 85){
                                    
                                    itemRank = 6;
                                    }
                                    else{
                                        if(randomNum > 75){
                                    
                                        itemRank = 5;
                                    
                                        }
                                        else{
                                            if( randomNum > 60){
                                        
                                            itemRank = 4;
                                            }
                                            else{
                                                if( randomNum > 40){
                                                
                                                    itemRank = 3;
                                                    
                                                }
                                                else{
                                                    if( randomNum > 20){
                                                    
                                                        itemRank = 2;
                                                    
                                                    }
                                                    else{
                                                        if( randomNum > 0){
                                                        
                                                            itemRank = 1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                }
                            }
                        }
               }
   }
    
       return itemRank;
    }
    
    //metodo que le asigna una estadistica al objetoEquipable de manera aleatoria
    public static String darItemStat(String itemName){
        
        String itemStat = "None";
        
        if (itemName .equals( "Armor") ){
            
            itemStat = "HP";
        }

        else if(itemName .equals ("Sword")){
        
            itemStat = "ATK";
        }
        
        else if(itemName .equals ("Shield")){
        
            itemStat = "DEF";
        }
        
        else if(itemName .equals ("Boots")){
        
            itemStat = "SPD";
         }
    
    return itemStat;
    }
    
    //metodo que le da un "valor" de manera aleatoria a un objetoEquipable("valor" es cuanto afecta a la estadistica correspondiente)
    public static int darItemValue(){
    
        int itemValue = ThreadLocalRandom.current().nextInt(1, 9 + 1);    
    
    return itemValue;
    }
   
    
    public static void main(String[] args) {
               
        //incialización de la variable "checker" que se usa para revisar cauntas veces el usuario ha introducido un comando no válido
        int checker = 0;
        
        //inicialización del inventario para objetos no equipados
         ArrayList <objetoEquipable> inventory = new ArrayList <objetoEquipable>();

        //inicialización del Array que contendrá a los Luchadores
        ArrayList <Luchador> list = new ArrayList <Luchador>();      
        
        //llamada al método menú
        menu(checker , list, inventory);
    } 
}
